const pipe = (...fns) => x => fns.reduce((y, f) => f(y), x)

const withConstructor = constructor => o => {
  const proto = Object.assign({},
    Object.getPrototypeOf(o),
    { constructor }
  );
  return Object.assign(Object.create(proto), o);
}

const schemes = {
  "expertOpinion": {
    "label": "Expert Opinion",
    "variables": [
      {
        "key": "E"
      },
      {
        "key": "S"
      },
      {
        "key": "A"
      }
    ],
    "data": "Source {{E}} is an expert in subject domain {{S}} containing proposition {{A}}"
  }
}

const withBattery = ({ capacity }) => o => {
  let percentCharged = 100;
  return {
    ...o,
    draw (percent) {
      const remaining = percentCharged - percent;
      percentCharged = remaining > 0 ? remaining : 0;
      return this;
    },
    getCharge: () => percentCharged,
    get capacity () {
      return capacity
    }
  };
};

const canDisplay = o => {
  return {
    ...o,
    display() {
      return `Source ${this.variables['E']} is an expert in subject domain ${this.variables['S']} containing proposition ${this.variables['A']}.`
    }
  }
}

// eventually, these factory functions should be autogenerated from the data in the object above

const createExpertOpinionSchema = ({ variables }) => pipe(
  canDisplay,
  withConstructor(createExpertOpinionSchema))({ variables })

const anExpertOpinion = createExpertOpinionSchema({
  variables: {
    'E': 'Doug',
    'S': 'pool',
    'A': 'pool is the best sport'
  }
})

console.log(anExpertOpinion.display())
