/**
 * Performs 3d forces integration, using given timestep. Uses Euler method to solve
 * differential equation (http://en.wikipedia.org/wiki/Euler_method ).
 *
 * @returns {Number} squared distance of total position updates.
 */

module.exports = integrate;

function integrate(bodies, timeStep) {
  var tx = 0, ty = 0, tz = 0,
      i, max = bodies.length;

  for (i = 0; i < max; ++i) {
    var body = bodies[i],
      coeff = timeStep / body.mass;

    if(typeof body.previousX === 'undefined') {
      body.previousX = body.pos.x
    }
    if(typeof body.previousY === 'undefined') {
      body.previousY = body.pos.y
    }
    if(typeof body.previousZ === 'undefined') {
      body.previousZ = body.pos.z
    }

    body.pos.x = 2 * body.pos.x - body.previousX + (body.force.x / body.mass) * timeStep * timeStep
    body.pos.y = 2 * body.pos.y - body.previousY + (body.force.y / body.mass) * timeStep * timeStep
    body.pos.z = 2 * body.pos.z - body.previousZ + (body.force.z / body.mass) * timeStep * timeStep

    tx += Math.abs(body.pos.x - body.previousX)
    ty += Math.abs(body.pos.y - body.previousY)
    tz += Math.abs(body.pos.z - body.previousZ)

    body.previousX = body.pos.x
    body.previousY = body.pos.y
    body.previousZ = body.pos.z
  }

  return (tx * tx + ty * ty + tz * tz)/bodies.length;
}
