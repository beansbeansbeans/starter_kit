var textureData, 
  getTreeAccessShader = require('./getTreeAccessShader'),
  getMaxIterations = require('./getMaxIterations'),
  output = [],
  sqrRoot = 0,
  desiredLength

function nearestPow2( aSize ) {
  return Math.pow( 2, Math.ceil( Math.log( aSize ) / Math.log( 2 ) ) ); 
}

var renderer = new THREE.WebGLRenderer(),
  gpuCompute, treeVariable,
  gl = renderer.getContext(),
  treeAccessShader,
  initialized = false,
  dtPosition

module.exports = {
  initialize: function(data) {
    if(initialized) return

    sqrRoot = nearestPow2(Math.ceil(Math.sqrt(data.length / 4)))
    desiredLength = sqrRoot * sqrRoot * 4

    for(var i=data.length; i<desiredLength; i++) {
      data.push(0)
    }

    var maxIterations = getMaxIterations(data, sqrRoot)
    treeAccessShader = getTreeAccessShader(maxIterations)

    output = new Float32Array(desiredLength)

    gpuCompute = new GPUComputationRenderer(sqrRoot, sqrRoot, renderer)
    
    dtPosition = new THREE.DataTexture( new Float32Array(desiredLength), sqrRoot, sqrRoot, THREE.RGBAFormat, THREE.FloatType )

    treeVariable = gpuCompute.addVariable("textureOctree", treeAccessShader, dtPosition)

    treeUniforms = treeVariable.material.uniforms
    treeUniforms.textureOctree = { value: null }

    treeVariable.material.fragmentShader = "\nuniform sampler2D textureOctree;\n" + treeVariable.material.fragmentShader;

    treeUniforms.sqrRoot = { value: sqrRoot }
    treeVariable.wrapS = THREE.RepeatWrapping
    treeVariable.wrapT = THREE.RepeatWrapping

    gpuCompute.init()
    
    initialized = true
  },
  texturify: function(data) {
    for(var i=data.length; i<desiredLength; i++) {
      data.push(0)
    }

    textureData = Float32Array.from(data)

    dtPosition.image.data = textureData
    dtPosition.needsUpdate = true

    treeUniforms.textureOctree.value = dtPosition

    gpuCompute.compute()

    renderer.readRenderTargetPixels(gpuCompute.getCurrentRenderTarget(treeVariable), 0, 0, sqrRoot, sqrRoot, output)
  },
  update: function(sourceBody, iterationIndex, nodeIndex) {
    var x = output[sourceBody.flattenedTreeIndex],
      y = output[sourceBody.flattenedTreeIndex + 1],
      z = output[sourceBody.flattenedTreeIndex + 2]

    if(typeof x === 'undefined') x = 0
    if(typeof y === 'undefined') y = 0
    if(typeof z === 'undefined') z = 0

    return [x, y, z]
  }
}